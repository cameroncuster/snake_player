April 6:
    * created the repository (csc315_spr2021_snake) and downloaded the startup
      code
    * compiled and ran the startup code
    * made first commit of startup code source with CHANGELOG

April 10:
    * attempted bfs search, could not get implementation to work smoothly with
      interface
    * fought debugger for extensive amount of time before deciding the bfs was
      not worth it
    * brainstormed ideas for more successful player

April 12:
    * thinking about new ideas every day and different graph algorithms becuase
      nothing else appears to be valid ( A*, Dijkstras with dynamic weights, etc. )

April 14:
    * confused about how anyone scored perfectly in the game with A* without
      using an algorithm which eventually created or approximated a Hamaltonian
      Path

April 15:
    * had idea for genetic algorithm to determine weights for A* dynamically
      throughout the search to be marketed as a "graph algorithm"
    * idea to use GA through evolution of random paths

April 17:
    * idea to loop along self by weighting edges with A* of tail very heavily,
      and if biconnected the then become a scanner until a path becomes available
    * going to implement one of the last two idea's, maybe both in the next few
      hours
    * going to implement GA with A* algorithm, A* builds length and GA build
      survival, with the focus of both algorithms the player must be successful
	* Working to implement the GA and have been unsuccessful thus far

April 18:
    * Some success with the genetic player as a minimal improvement from the
      previous player
    * Working to expand the GA for multiple generations, current success with one
      generation has been minimal
    * GA tracks score, but the length of the snake is not approximated correctly
      because the apples in the simulated games spawn in different locations than
      in actual gameplay so the snake thinks it is shorter than it is
    * Potential Fixes: spawn more apples in the simulation, count number of moves,
      not score for naturally selecting the next generation

April 20:
    * began exploring idea for astar where heuristic follows tail of snake
    * rough pseudo implementation written on astar branch
    * master cleaned and branching implemented for clean code base and proper
      coding standard
    * Working A* player with no heuristic, going to modify the heurisitc to
      follow the tail for as long as possible (e.a. nodes adjacent to the tail
      are weighted very heavily in heuristic)
    * modified heuristic for A* to follow the tail of the snake, has not been as
      effective as desired
    * potentially weight the heuristic by the amount of grid reachable based on
      given decision
    * Implemented DFS search with minimal success, the search traps itself often,
      but is blazingly fast, might be able to leverage this
    * Idea to remove nodes from the graph as I visit them until all nodes are 
      removed then reconstruct graph

April 21:

 * * * * * * * * * * * * * * * * * * * *
 * Average Scores using AStar with     *
 *     modified heuristic              *
 *                                     *
 * Size: 20 x 20                       *
 * Number Items : 100                  *
 * Average Score: 62.24                *
 * Maximum Score: 100                  *
 * Average Time : 0.0015239223         *
 *                                     *
 * * * * * * * * * * * * * * * * * * * *

 * * * * * * * * * * * * * * * * * * * *
 * Average Scores using DFS SSSP       *
 *                                     *
 * Size: 20 x 20                       *
 * Number Items : 100                  *
 * Average Score: 43.34                *
 * Maximum Score: 54                   *
 * Average Time : 1.11068321e-05       *
 *                                     *
 * * * * * * * * * * * * * * * * * * * *

	* the modified heuristic has performed much better than current
	  implementation of the genetic algorithm or the dfs search as shown above
    * added GitLab runner provided by Devon Schneider with attribution
    * Runner tests successful compilation on master when pushing to repo -
      ensures proper development practices are being upheld (e.a. not inducing
      crashing/hanging on the runner scripts)

April 22:
    * idea for path from head to tail, tail to food, food to tail in execution

April 23:
	* implemented the idea from April 22, success has been the same as the AStar
	  with modified heuristic thus far, even with path compression which did not
	  appear to improve anything
	* success was minimal with the continual search approach because the graph
	  split itself multiple times

April 24:
	* Updated for random searching in AStar cycle path if no node is found, looks
	  to have imporved the score a bit
	* idea to take longest path to tail if either the path to the food or the tail
	  is unavailable

April 25:
	* finally GOT IT TO WORK, MY IDEA WAS CORRECT, IT DEVELOPS A CYCLE!!!

April 26:
	* after my success yesterday the player has performed incredible. Sometimes
	  the player spends a long time between runs, to reform itself, and runs can
	  even become infinite if no path to the food is ever found that doesn't
	  allow a path back to the tail. I think if I searched to every empty space
	  at that point to increase distance between tail and head the player would
	  win everytime on the playfield with no obstacles
	* need to track own tail + speed up the algorithm + document
    * updated to not use a modified interface, and game.cpp kills infinite games
