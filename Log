April 6:
    * created the repository (csc315_spr2021_snake) and downloaded the startup
      code
    * compiled and ran the startup code
    * made first commit of startup code source with CHANGELOG

April 10:
    * attempted bfs search, could not get implementation to work smoothly with
      interface
    * fought debugger for extensive amount of time before deciding the bfs was
      not worth it
    * brainstormed ideas for more successful player

April 12:
    * thinking about new ideas every day and different graph algorithms becuase
      nothing else appears to be valid ( A*, Dijkstras with dynamic weights, etc. )

April 14:
    * confused about how anyone scored perfectly in the game with A* without
      using an algorithm which eventually created or approximated a Hamaltonian
      Path

April 15:
    * had idea for genetic algorithm to determine weights for A* dynamically
      throughout the search to be marketed as a "graph algorithm"
    * idea to use GA through evolution of random paths

April 17:
    * idea to loop along self by weighting edges with A* of tail very heavily,
      and if biconnected the then become a scanner until a path becomes available
    * going to implement one of the last two idea's, maybe both in the next few
      hours
    * going to implement GA with A* algorithm, A* builds length and GA build
      survival, with the focus of both algorithms the player must be successful
	* Working to implement the GA and have been unsuccessful thus far

April 18:
    * Some success with the genetic player as a minimal improvement from the
      previous player
    * Working to expand the GA for multiple generations, current success with one
      generation has been minimal
    * Working A* player with no heuristic, going to modify the heurisitc to
      follow the tail for as long as possible (e.a. nodes adjacent to the tail
      are weighted very heavily in heuristic)
    * modified heuristic for A* to follow the tail of the snake, has not been as
      effective as desired
    * potentially weight the heuristic by the amount of grid reachable based on
      given decision
